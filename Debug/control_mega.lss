
control_mega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  00000260  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c60  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d6  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075d  00000000  00000000  000019c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00002124  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000574  00000000  00000000  00002280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019f  00000000  00000000  000027f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002993  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	62 c0       	rjmp	.+196    	; 0x102 <__vector_15>
  3e:	00 00       	nop
  40:	87 c0       	rjmp	.+270    	; 0x150 <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ad 30       	cpi	r26, 0x0D	; 13
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	66 d0       	rcall	.+204    	; 0x176 <main>
  aa:	9e c0       	rjmp	.+316    	; 0x1e8 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <GigroControl_Init>:
**               KL9 -> PB5, KL_H -> PC1, KL_L->  PC3,
*******************************************************************************
*/
void GigroControl_Init ( void )
{
	PORTF &= ~( 1 << PORTF6 );
  ae:	a2 e6       	ldi	r26, 0x62	; 98
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	8c 91       	ld	r24, X
  b4:	8f 7b       	andi	r24, 0xBF	; 191
  b6:	8c 93       	st	X, r24
	DDRF  |= ( 1 << DDRF6 );
  b8:	e1 e6       	ldi	r30, 0x61	; 97
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	80 83       	st	Z, r24
	
	PORTF &= ~( ( 1 << PORTF5 ) | ( 1 << PORTF4 ) | ( 1 << PORTF3 ) | ( 1 << PORTF2 ) ) ;
  c2:	8c 91       	ld	r24, X
  c4:	83 7c       	andi	r24, 0xC3	; 195
  c6:	8c 93       	st	X, r24
	DDRF  &= ~( ( 1 << DDRF5 ) | ( 1 << DDRF4 ) | ( 1 << DDRF3 ) | ( 1 << DDRF2 ) );
  c8:	80 81       	ld	r24, Z
  ca:	83 7c       	andi	r24, 0xC3	; 195
  cc:	80 83       	st	Z, r24
	
	PORTA &= ~( ( 1 << PORTA5 ) | ( 1 << PORTA4 ) | ( 1 << PORTA3 ) | ( 1 << PORTA2 ) ) ;
  ce:	8b b3       	in	r24, 0x1b	; 27
  d0:	83 7c       	andi	r24, 0xC3	; 195
  d2:	8b bb       	out	0x1b, r24	; 27
	DDRA  &= ~( ( 1 << DDRA3 ) | ( 1 << DDRA2 ) | ( 1 << DDRA1 ) | ( 1 << DDRA0 ) );
  d4:	8a b3       	in	r24, 0x1a	; 26
  d6:	80 7f       	andi	r24, 0xF0	; 240
  d8:	8a bb       	out	0x1a, r24	; 26
  da:	08 95       	ret

000000dc <RelayKlapan_Init>:
**               KL9 -> PB5, KL_H -> PC1, KL_L->  PC3,
*******************************************************************************
*/
void RelayKlapan_Init ( void )
{
	PORTD &= ~( (1 << PORTD7) | (1 << PORTD6) | (1 << PORTD5) | (1 << PORTD4) | (1 << PORTD3) | (1 << PORTD2) );
  dc:	82 b3       	in	r24, 0x12	; 18
  de:	83 70       	andi	r24, 0x03	; 3
  e0:	82 bb       	out	0x12, r24	; 18
	DDRD  |= ( (1 << DDRD7) | (1 << DDRD6) | (1 << DDRD5) | (1 << DDRD4) | (1 << DDRD3) | (1 << DDRD2) );
  e2:	81 b3       	in	r24, 0x11	; 17
  e4:	8c 6f       	ori	r24, 0xFC	; 252
  e6:	81 bb       	out	0x11, r24	; 17
	
	PORTB &= ~( (1 << PORTB7) | (1 << PORTB6) | (1 << PORTB5) );
  e8:	88 b3       	in	r24, 0x18	; 24
  ea:	8f 71       	andi	r24, 0x1F	; 31
  ec:	88 bb       	out	0x18, r24	; 24
	DDRB  |= ( (1 << DDRB7) | (1 << DDRB6) | (1 << DDRB5) );
  ee:	87 b3       	in	r24, 0x17	; 23
  f0:	80 6e       	ori	r24, 0xE0	; 224
  f2:	87 bb       	out	0x17, r24	; 23
	
	PORTC &= ~( (1 << PORTC3) | (1 << PORTC1) );
  f4:	85 b3       	in	r24, 0x15	; 21
  f6:	85 7f       	andi	r24, 0xF5	; 245
  f8:	85 bb       	out	0x15, r24	; 21
	DDRC  |= ( (1 << DDRC3) | (1 << DDRC1) );
  fa:	84 b3       	in	r24, 0x14	; 20
  fc:	8a 60       	ori	r24, 0x0A	; 10
  fe:	84 bb       	out	0x14, r24	; 20
 100:	08 95       	ret

00000102 <__vector_15>:
** Return      : none
** Notes       :
*******************************************************************************
*/
ISR ( TIMER0_COMP_vect )
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	0b b6       	in	r0, 0x3b	; 59
 10e:	0f 92       	push	r0
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
    TCNT0 = 0;
 118:	12 be       	out	0x32, r1	; 50
    sys_var.sys_tick++;
 11a:	e0 e0       	ldi	r30, 0x00	; 0
 11c:	f1 e0       	ldi	r31, 0x01	; 1
 11e:	80 81       	ld	r24, Z
 120:	91 81       	ldd	r25, Z+1	; 0x01
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	91 83       	std	Z+1, r25	; 0x01
 126:	80 83       	st	Z, r24
    if ( sys_var.sys_tick == 10 ) {
 128:	0a 97       	sbiw	r24, 0x0a	; 10
 12a:	21 f4       	brne	.+8      	; 0x134 <__vector_15+0x32>
        sys_var.sys_tick = 0;
 12c:	11 82       	std	Z+1, r1	; 0x01
 12e:	10 82       	st	Z, r1
        sys_var.Fw_1_ms = 1;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 87       	std	Z+8, r24	; 0x08
    }
    sbi ( TIFR, OCF0 );
 134:	86 b7       	in	r24, 0x36	; 54
 136:	82 60       	ori	r24, 0x02	; 2
 138:	86 bf       	out	0x36, r24	; 54
}
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0b be       	out	0x3b, r0	; 59
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <__vector_16>:
** Return      : none
** Notes       :
*******************************************************************************
*/
ISR ( TIMER0_OVF_vect )
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
    _NOP();
 15a:	00 00       	nop
}
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <TimerSys_Init>:
** Notes       :
*******************************************************************************
*/
void TimerSys_Init ( void )
{
    TCCR0 = 0x02;  // F = Fclk/8
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	83 bf       	out	0x33, r24	; 51
    OCR0  = 97;   // 100 usec
 16a:	81 e6       	ldi	r24, 0x61	; 97
 16c:	81 bf       	out	0x31, r24	; 49
    TIMSK |= ( 1 << OCIE0 );
 16e:	87 b7       	in	r24, 0x37	; 55
 170:	82 60       	ori	r24, 0x02	; 2
 172:	87 bf       	out	0x37, r24	; 55
 174:	08 95       	ret

00000176 <main>:
** Notes       :
*******************************************************************************
*/
int main(void)
{
    ACSR  = 0x80;		// Analog Comparator Disable
 176:	80 e8       	ldi	r24, 0x80	; 128
 178:	88 b9       	out	0x08, r24	; 8
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	f8 94       	cli
 17e:	a8 95       	wdr
 180:	81 b5       	in	r24, 0x21	; 33
 182:	88 61       	ori	r24, 0x18	; 24
 184:	81 bd       	out	0x21, r24	; 33
 186:	11 bc       	out	0x21, r1	; 33
 188:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
    // RES32 - ESP32 -> PE7
    DDRE  |= ( 1 << DDE7 );
 18a:	82 b1       	in	r24, 0x02	; 2
 18c:	80 68       	ori	r24, 0x80	; 128
 18e:	82 b9       	out	0x02, r24	; 2
    PORTE |= ( 1 << PORTE7 );
 190:	83 b1       	in	r24, 0x03	; 3
 192:	80 68       	ori	r24, 0x80	; 128
 194:	83 b9       	out	0x03, r24	; 3
    // ERST - W5500  -> PB4
    DDRB  |= ( 1 << DDB4 );
 196:	87 b3       	in	r24, 0x17	; 23
 198:	80 61       	ori	r24, 0x10	; 16
 19a:	87 bb       	out	0x17, r24	; 23
    PORTB |= ( 1 << PORTB4 );
 19c:	88 b3       	in	r24, 0x18	; 24
 19e:	80 61       	ori	r24, 0x10	; 16
 1a0:	88 bb       	out	0x18, r24	; 24
    
    RelayPump_Init ();
 1a2:	0d d0       	rcall	.+26     	; 0x1be <RelayPump_Init>
    PressureSensor_Init ();
 1a4:	1b d0       	rcall	.+54     	; 0x1dc <PressureSensor_Init>

    RelayKlapan_Init();
 1a6:	9a df       	rcall	.-204    	; 0xdc <RelayKlapan_Init>
	GigroControl_Init ();
 1a8:	82 df       	rcall	.-252    	; 0xae <GigroControl_Init>
 1aa:	dd df       	rcall	.-70     	; 0x166 <TimerSys_Init>

    TimerSys_Init();
 1ac:	78 94       	sei
 1ae:	00 00       	nop
    sei();
 1b0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_edata+0x8>
		
    while (1) 
    {
        _NOP();
        if ( sys_var.Fw_1_ms == 1 ) {
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	d9 f7       	brne	.-10     	; 0x1ae <main+0x38>
 1b8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_edata+0x8>
            sys_var.Fw_1_ms = 0;
 1bc:	f8 cf       	rjmp	.-16     	; 0x1ae <main+0x38>

000001be <RelayPump_Init>:
 1be:	24 b3       	in	r18, 0x14	; 20
 1c0:	81 e0       	ldi	r24, 0x01	; 1
void RelayPump_Function ( uint8_t f )
{
    if ( f == OFF ) {
        PORTC &= ~( 1 << PORTC0 );
    } else {
        PORTC |= ( 1 << PORTC0 );
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <RelayPump_Init+0xc>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	2a 95       	dec	r18
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <RelayPump_Init+0x8>
 1ce:	94 b3       	in	r25, 0x14	; 20
 1d0:	89 2b       	or	r24, r25
 1d2:	84 bb       	out	0x14, r24	; 20
 1d4:	85 b3       	in	r24, 0x15	; 21
 1d6:	8e 7f       	andi	r24, 0xFE	; 254
 1d8:	85 bb       	out	0x15, r24	; 21
 1da:	08 95       	ret

000001dc <PressureSensor_Init>:
** Notes       : PF6 - L lewel, PF7 - H lewel
*******************************************************************************
*/
void PressureSensor_Init ( void )
{
    DDRF &= ~( ( 1 << PORTF6 ) | ( 1 << PORTF7 ) );
 1dc:	e1 e6       	ldi	r30, 0x61	; 97
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	8f 73       	andi	r24, 0x3F	; 63
 1e4:	80 83       	st	Z, r24
 1e6:	08 95       	ret

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
